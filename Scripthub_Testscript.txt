local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")

-- Base64 Decoder Funktion
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function base64decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c=0
        for i=1,8 do c=c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

local function fadeText(textLabel, fadeInTime, visibleTime, fadeOutTime)
    local steps = 20
    for i = 0, steps do
        textLabel.TextTransparency = 1 - (i / steps)
        wait(fadeInTime / steps)
    end
    wait(visibleTime)
    for i = 0, steps do
        textLabel.TextTransparency = (i / steps)
        wait(fadeOutTime / steps)
    end
end

wait(1)

local gui = Instance.new("ScreenGui", PlayerGui)

local loadingFrame = Instance.new("Frame", gui)
loadingFrame.Size = UDim2.new(0, 300, 0, 100)
loadingFrame.Position = UDim2.new(0.5, -150, 0.5, -50)
loadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
loadingFrame.BorderSizePixel = 0

local loadingLabel = Instance.new("TextLabel", loadingFrame)
loadingLabel.Size = UDim2.new(1, 0, 0, 25)
loadingLabel.Position = UDim2.new(0, 0, 0, 5)
loadingLabel.BackgroundTransparency = 1
loadingLabel.Text = "Lädt..."
loadingLabel.TextColor3 = Color3.new(1,1,1)
loadingLabel.Font = Enum.Font.SourceSans
loadingLabel.TextSize = 20

local progressBarBG = Instance.new("Frame", loadingFrame)
progressBarBG.Size = UDim2.new(0.8, 0, 0, 25)
progressBarBG.Position = UDim2.new(0.1, 0, 0, 50)
progressBarBG.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

local progressBar = Instance.new("Frame", progressBarBG)
progressBar.Size = UDim2.new(0, 0, 1, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0, 122, 204)

local loadTime = 3
local startTime = tick()
while tick() - startTime < loadTime do
    local progress = (tick() - startTime) / loadTime
    progressBar.Size = UDim2.new(progress, 0, 1, 0)
    wait(0.03)
end
loadingFrame:Destroy()

local keyGui = Instance.new("Frame", gui)
keyGui.Size = UDim2.new(0, 300, 0, 150)
keyGui.Position = UDim2.new(0.5, -150, 0.5, -75)
keyGui.BackgroundColor3 = Color3.fromRGB(15, 15, 15)

local prompt = Instance.new("TextLabel", keyGui)
prompt.Size = UDim2.new(1, -20, 0, 30)
prompt.Position = UDim2.new(0, 10, 0, 10)
prompt.BackgroundTransparency = 1
prompt.Text = "Bitte geben Sie Ihren Key ein!"
prompt.TextColor3 = Color3.new(1, 1, 1)
prompt.Font = Enum.Font.SourceSans
prompt.TextSize = 22

local keyLabel = Instance.new("TextLabel", keyGui)
keyLabel.Size = UDim2.new(0, 40, 0, 30)
keyLabel.Position = UDim2.new(0, 10, 0, 50)
keyLabel.BackgroundTransparency = 1
keyLabel.Text = "Key:"
keyLabel.TextColor3 = Color3.new(1,1,1)
keyLabel.Font = Enum.Font.SourceSans
keyLabel.TextSize = 20

local keyBox = Instance.new("TextBox", keyGui)
keyBox.Size = UDim2.new(0, 100, 0, 30) -- Anfangsbreite 100px
keyBox.Position = UDim2.new(0, 55, 0, 50)
keyBox.PlaceholderText = "" -- kein PlaceholderText
keyBox.ClearTextOnFocus = false
keyBox.Text = ""
keyBox.Font = Enum.Font.SourceSans
keyBox.TextSize = 20
keyBox.TextColor3 = Color3.new(0,0,0)
keyBox.BackgroundColor3 = Color3.fromRGB(200, 200, 200) -- hellgrau

keyBox:GetPropertyChangedSignal("Text"):Connect(function()
    local textLen = #keyBox.Text
    local baseWidth = 100
    local maxWidth = 200
    local charWidth = 7

    local newWidth = baseWidth + (textLen * charWidth)

    if newWidth > maxWidth then
        keyBox.Size = UDim2.new(0, maxWidth, 0, 30)
    elseif newWidth > baseWidth then
        keyBox.Size = UDim2.new(0, newWidth, 0, 30)
    else
        keyBox.Size = UDim2.new(0, baseWidth, 0, 30)
    end
end)

local resultLabel = Instance.new("TextLabel", keyGui)
resultLabel.Size = UDim2.new(1, -20, 0, 30)
resultLabel.Position = UDim2.new(0, 10, 0, 90)
resultLabel.BackgroundTransparency = 1
resultLabel.Text = ""
resultLabel.TextColor3 = Color3.new(1, 0, 0)
resultLabel.Font = Enum.Font.SourceSans
resultLabel.TextSize = 18

local function showScriptHub()
    local fadeGui = Instance.new("ScreenGui", PlayerGui)
    fadeGui.Name = "FadeGui"
    local fadeLabel = Instance.new("TextLabel", fadeGui)
    fadeLabel.Size = UDim2.new(0, 400, 0, 100)
    fadeLabel.Position = UDim2.new(0.5, -200, 0.5, -50)
    fadeLabel.BackgroundTransparency = 1
    fadeLabel.Text = "ScriptHub"
    fadeLabel.TextColor3 = Color3.new(1,1,1)
    fadeLabel.Font = Enum.Font.SourceSansBold
    fadeLabel.TextSize = 42
    fadeLabel.TextStrokeTransparency = 0.7
    fadeLabel.TextTransparency = 1
    fadeLabel.TextXAlignment = Enum.TextXAlignment.Center
    fadeLabel.TextYAlignment = Enum.TextYAlignment.Center
    fadeText(fadeLabel, 1, 1, 0.5)
    fadeGui:Destroy()
end

local function createExitGui()
    local exitGui = Instance.new("ScreenGui", PlayerGui)
    exitGui.Name = "ExitGui"
    exitGui.ResetOnSpawn = false
    exitGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local frame = Instance.new("Frame", exitGui)
    frame.Size = UDim2.new(0, 300, 0, 100)
    frame.Position = UDim2.new(0.5, -150, 0.5, -50)
    frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    frame.BorderSizePixel = 0

    local btn = Instance.new("TextButton", frame)
    btn.Size = UDim2.new(0, 200, 0, 50)
    btn.Position = UDim2.new(0.5, -100, 0.5, -25)
    btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    btn.BorderColor3 = Color3.fromRGB(40, 40, 40)
    btn.BorderSizePixel = 2
    btn.Text = "Script beenden"
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 24
    btn.AutoButtonColor = true
    btn.ClipsDescendants = true
    btn.TextWrapped = false
    btn.TextXAlignment = Enum.TextXAlignment.Center
    btn.TextYAlignment = Enum.TextYAlignment.Center
    btn.BorderMode = Enum.BorderMode.Outline

    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 8)

    btn.MouseButton1Click:Connect(function()
        if gui then gui:Destroy() end
        local fadeGui = PlayerGui:FindFirstChild("FadeGui")
        if fadeGui then fadeGui:Destroy() end
        local exitGui = PlayerGui:FindFirstChild("ExitGui")
        if exitGui then exitGui:Destroy() end
    end)

    return exitGui
end

local function checkKey()
    resultLabel.TextColor3 = Color3.new(1,1,1)
    resultLabel.Text = "Überprüfe..."
    keyBox.TextEditable = false
    wait(1)
    local decodedKey = base64decode(keyBox.Text)
    if decodedKey == "SCRIPTHUBKEY_123456" then
        resultLabel.TextColor3 = Color3.fromRGB(0, 200, 0)
        resultLabel.Text = "Key gültig!"
        wait(2)
        keyGui:Destroy()
        showScriptHub()
        createExitGui()
    else
        resultLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
        resultLabel.Text = "Ungültiger Key! Bitte versuchen Sie es nochmal!"
        keyBox.Text = ""
        keyBox.TextEditable = true
        keyBox:CaptureFocus()
    end
end

keyBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        checkKey()
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Return then
        checkKey()
    end
end)

keyBox:CaptureFocus()
